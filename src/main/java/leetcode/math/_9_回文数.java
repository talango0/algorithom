package leetcode.math;
//给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。
//
//回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
//
//例如，121 是回文，而 123 不是。
//
//
//示例 1：
//
//输入：x = 121
//输出：true
//示例2：
//
//输入：x = -121
//输出：false
//解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
//示例 3：
//
//输入：x = 10
//输出：false
//解释：从右向左读, 为 01 。因此它不是一个回文数。
//
//
//提示：
//
//-231<= x <= 231- 1
//
//
//进阶：你能不将整数转为字符串来解决这个问题吗？


public class _9_回文数 {
    /**
     * 如果我们输入的是最大32位整数2147483647，这个数字本身是没有问题，是一个合法的32位最大整数，用int存储也没问题，但是如果将这个数字反转的话，
     * 其大小超过了32位最大整数，也就是会溢出
     * <p>
     * 那是否要把变量的类型改成long来存储呢，这样反转后的数字就不会溢出了。
     * <p>
     * 其实不用，虽然我们反转的数字不对，但是返回的结果却是对的。
     * <p>
     * 因为32位整数中最大的回文数 是2147447412，这个数字是比最大32位整数 小的。
     * <p>
     * 所以超过2147447412大小的数字也就不是回文数字了，虽然我们经过反转后的数字溢出了，但它的返回结果却是对的，这也算是歪打正着，
     * 于是我们继续用int类型来保存数字，也没问题。
     * <p>
     * 我们不用反转整数的所有数字，只需要反转一半数字就可以了，这是利用了【回文】的对称性
     * <p>
     * 如果回文数长度为奇数，经常上面的循环处理后，新数字正好是原数字x的10倍，所以返回结果需要考虑奇偶两种情况，即这么判断(假设新数字保存在ans里)
     * <p>
     * <p>
     * x==ans || x==(ans/10)
     * 对于10，20，100这样的数字，用上面的判断方式就有问题了
     *
     * 所以我们要对这些数字特殊处理一下，如果某个数字%10等于0，并且它不是0开头，那么直接返回false就可以了。
     */
    class Solution {
        public boolean isPalindrome(int x) {
            if (x < 0 || (x % 10 == 0 && x != 0)) {
                return false;
            }
            int ans = 0;
            while (x > ans) {
                ans = ans * 10 + x % 10;
                x /= 10;
            }
            return x == ans || x == (ans / 10);
        }
    }
}
