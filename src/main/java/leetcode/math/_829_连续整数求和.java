package leetcode.math;

/**
 * @author mayanwei
 * @date 2022-09-12.
 */
public class _829_连续整数求和{
    /**
     * ┌─────────────────────────┐
     * │  a_n = a_1 + (n-1) * d  │
     * │                         │
     * │s_n = (a_1 + a_n) * k / 2│
     * └─────────────────────────┘
     * ┌────────────────────────────────────────────────────────────────────┐
     * │                               d = 1                                │
     * │                                                                    │
     * │                      n = (a_1 + a_n) * k / 2                       │
     * │                                                                    │
     * │                  n = (a_1 + a_1 + k - 1) * k / 2                   │
     * │                                                                    │
     * │                  2 * n = (a_1 + a_1 + k - 1) * k                   │
     * │                                                                    │
     * │                       (2*n)/k = 2*a_1 + k-1                        │
     * │                                                                    │
     * │             (2*n)/k -k + 1 = 2* a_1   ==>   ⓵ %2 == 0              │
     * │                                                                    │
     * │                  a_1 >= 1 => (2*n)/k - k + 1 >= 2                  │
     * │                                                                    │
     * │       ==> (2*n)/k -k >= 1 ==> (2*n)/k>=k+1  ===> ⓶ % k == 0        │
     * │                         ==> (2*n)/k > k ⓷                          │
     * │                                                                    │
     * └────────────────────────────────────────────────────────────────────┘
     */
    class Solution{
        public int consecutiveNumbersSum(int n) {
            int ans = 0;
            // 推理过程主要用到 等差数列通项公式 等差数列求和公式，算出 k的的上界
            for (int k = 1; k * k < 2 * n; k++) {
                if (2 * n % k == 0 && (2 * n / k - k + 1) % 2 == 0) {
                    ans++;
                }
            }
            return ans;
        }
    }
}
