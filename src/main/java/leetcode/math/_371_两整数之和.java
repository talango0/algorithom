package leetcode.math;
//给你两个整数 a 和 b ，不使用 运算符 + 和 - ，计算并返回两整数之和。
//
//
//
// 示例 1：
//
//
//输入：a = 1, b = 2
//输出：3
//
//
// 示例 2：
//
//
//输入：a = 2, b = 3
//输出：5
//
//
//
//
// 提示：
//
//
// -1000 <= a, b <= 1000
//
//
// Related Topics 位运算 数学 👍 635 👎 0

/**
 * @author mayanwei
 * @date 2022-09-25.
 */
public class _371_两整数之和{
    /**
     * 二进制4种情况
     * 0 + 0 = 0
     * 1 + 0 = 1
     * 0 + 1 = 1
     * 1 + 1 = 0 （进位）
     * 在不考虑进位的情况下，其无进位加法结果位 a^b
     * 二所有需要进位的位为 a & b,进位后的结果为 (a & b) << 1
     * 因此，可以将整数 a 和 b 的和，拆分为 a和b的无进位加法结果于进位结果的和。因此每次拆分都可以让需要进位的最低位至少左移1为，又因为
     * a和b可以负数，所以最多需要 log(max_int)次拆分完成运算。
     * 因为有符号数使用补码来表示，所以算法可以推广到 0和负数
     * <p>
     * 时间复杂度 O(log(max_int))
     * 空间复杂度 O(1)
     */
    class Solution{
        public int getSum(int a, int b) {
            while (b != 0) {
                int carry = (a & b) << 1;
                a = a ^ b;
                b = carry;
            }
            return a;
        }
    }
}
