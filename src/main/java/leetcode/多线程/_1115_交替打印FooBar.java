package leetcode.Â§öÁ∫øÁ®ã;
//Áªô‰Ω†‰∏Ä‰∏™Á±ªÔºö
//
//
//class FooBar {
//  public void foo() {
//  for (int i = 0; i < n; i++) {
//   print("foo");
//   }
//  }
//
//  public void bar() {
//  for (int i = 0; i < n; i++) {
//   print("bar");
//  }
//  }
//}
//
//
// ‰∏§‰∏™‰∏çÂêåÁöÑÁ∫øÁ®ãÂ∞Ü‰ºöÂÖ±Áî®‰∏Ä‰∏™ FooBar ÂÆû‰æãÔºö
//
//
// Á∫øÁ®ã A Â∞Ü‰ºöË∞ÉÁî® foo() ÊñπÊ≥ïÔºåËÄå
// Á∫øÁ®ã B Â∞Ü‰ºöË∞ÉÁî® bar() ÊñπÊ≥ï
//
//
// ËØ∑ËÆæËÆ°‰øÆÊîπÁ®ãÂ∫èÔºå‰ª•Á°Æ‰øù "foobar" Ë¢´ËæìÂá∫ n Ê¨°„ÄÇ
//
//
//
// Á§∫‰æã 1Ôºö
//
//
//ËæìÂÖ•Ôºön = 1
//ËæìÂá∫Ôºö"foobar"
//Ëß£ÈáäÔºöËøôÈáåÊúâ‰∏§‰∏™Á∫øÁ®ãË¢´ÂºÇÊ≠•ÂêØÂä®„ÄÇÂÖ∂‰∏≠‰∏Ä‰∏™Ë∞ÉÁî® foo() ÊñπÊ≥ï, Âè¶‰∏Ä‰∏™Ë∞ÉÁî® bar() ÊñπÊ≥ïÔºå"foobar" Â∞ÜË¢´ËæìÂá∫‰∏ÄÊ¨°„ÄÇ
//
//
// Á§∫‰æã 2Ôºö
//
//
//ËæìÂÖ•Ôºön = 2
//ËæìÂá∫Ôºö"foobarfoobar"
//Ëß£ÈáäÔºö"foobar" Â∞ÜË¢´ËæìÂá∫‰∏§Ê¨°„ÄÇ
//
//
//
//
// ÊèêÁ§∫Ôºö
//
//
// 1 <= n <= 1000
//
// Related Topics Â§öÁ∫øÁ®ã üëç 146 üëé 0


import org.junit.jupiter.api.Test;

import java.util.concurrent.*;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * @author mayanwei
 * @date 2022-03-12.
 */
public class _1115_‰∫§ÊõøÊâìÂç∞FooBar{

    //BLOCKING Queue
    class FooBar0{
        private int n;
        private BlockingQueue<Integer> bar = new LinkedBlockingQueue<>(1);
        private BlockingQueue<Integer> foo = new LinkedBlockingQueue<>(1);

        public FooBar0(int n) {
            this.n = n;
        }

        public void foo(Runnable printFoo) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                foo.put(i);
                printFoo.run();
                bar.put(i);
            }
        }

        public void bar(Runnable printBar) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                bar.take();
                printBar.run();
                foo.take();
            }
        }
    }

    @Test
    public void testforbar0() throws InterruptedException {
        FooBar0 fooBar0 = new FooBar0(2);
        Runnable foo = new Runnable(){
            @Override
            public void run() {
                System.out.print("foo");
            }
        };
        new Thread(()->{
            try {
                fooBar0.foo(foo);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }).start();
        Runnable bar = new Runnable(){
            @Override
            public void run() {
                System.out.print("bar");
            }
        };
        fooBar0.bar(bar);
        new Thread(()->{
            try {
                fooBar0.bar(bar);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }).start();


    }

    //CyclicBarrier ÊéßÂà∂ÂÖàÂêé
    class FooBar6{
        private int n;

        public FooBar6(int n) {
            this.n = n;
        }

        CyclicBarrier cb = new CyclicBarrier(2);
        volatile boolean fin = true;

        public void foo(Runnable printFoo) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                while (!fin) ;
                printFoo.run();
                fin = false;
                try {
                    cb.await();
                } catch (BrokenBarrierException e) {
                }
            }
        }

        public void bar(Runnable printBar) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                try {
                    cb.await();
                } catch (BrokenBarrierException e) {
                }
                printBar.run();
                fin = true;
            }
        }
    }

    // Ëá™Êóã + ËÆ©Âá∫CPU
    class FooBar5{
        private int n;

        public FooBar5(int n) {
            this.n = n;
        }

        volatile boolean permitFoo = true;

        public void foo(Runnable printFoo) throws InterruptedException {
            for (int i = 0; i < n; ) {
                if (permitFoo) {
                    printFoo.run();
                    i++;
                    permitFoo = false;
                }
                else {
                    Thread.yield();
                }
            }
        }

        public void bar(Runnable printBar) throws InterruptedException {
            for (int i = 0; i < n; ) {
                if (!permitFoo) {
                    printBar.run();
                    i++;
                    permitFoo = true;
                }
                else {
                    Thread.yield();
                }
            }
        }
    }


    // ÂèØÈáçÂÖ•ÈîÅ + Condition
    class FooBar4{
        private int n;

        public FooBar4(int n) {
            this.n = n;
        }

        Lock lock = new ReentrantLock(true);
        private final Condition foo = lock.newCondition();
        volatile boolean flag = true;

        public void foo(Runnable printFoo) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                lock.lock();
                try {
                    while (!flag) {
                        foo.await();
                    }
                    printFoo.run();
                    flag = false;
                    foo.signal();
                } finally {
                    lock.unlock();
                }
            }
        }

        public void bar(Runnable printBar) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                lock.lock();
                try {
                    while (flag) {
                        foo.await();
                    }
                    printBar.run();
                    flag = true;
                    foo.signal();
                } finally {
                    lock.unlock();
                }
            }
        }
    }

    //synchronized + Ê†áÂøó‰Ωç + Âî§ÈÜí
    class FooBar3{
        private int n;
        // Ê†áÂøó‰ΩçÔºåÊéßÂà∂ÊâßË°åÈ°∫Â∫èÔºåtrueÊâßË°åprintFooÔºåfalseÊâßË°åprintBar
        private volatile boolean type = true;
        private final Object foo = new Object(); // ÈîÅÊ†áÂøó

        public FooBar3(int n) {
            this.n = n;
        }

        public void foo(Runnable printFoo) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                synchronized (foo) {
                    while (!type) {
                        foo.wait();
                    }
                    printFoo.run();
                    type = false;
                    foo.notifyAll();
                }
            }
        }

        public void bar(Runnable printBar) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                synchronized (foo) {
                    while (type) {
                        foo.wait();
                    }
                    printBar.run();
                    type = true;
                    foo.notifyAll();
                }
            }
        }
    }


    //‰ø°Âè∑Èáè ÈÄÇÂêàÊéßÂà∂È°∫Â∫è
    class FooBar2{
        private int n;
        private Semaphore foo = new Semaphore(1);
        private Semaphore bar = new Semaphore(0);

        public FooBar2(int n) {
            this.n = n;
        }

        public void foo(Runnable printFoo) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                foo.acquire();
                printFoo.run();
                bar.release();
            }
        }

        public void bar(Runnable printBar) throws InterruptedException {
            for (int i = 0; i < n; i++) {
                bar.acquire();
                printBar.run();
                foo.release();
            }
        }
    }


}
