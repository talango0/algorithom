package leetcode.stack;
//只有满足下面几点之一，括号字符串才是有效的：
//
//
// 它是一个空字符串，或者
// 它可以被写成 AB （A 与 B 连接）, 其中 A 和 B 都是有效字符串，或者
// 它可以被写作 (A)，其中 A 是有效字符串。
//
//
// 给定一个括号字符串 s ，移动N次，你就可以在字符串的任何位置插入一个括号。
//
//
// 例如，如果 s = "()))" ，你可以插入一个开始括号为 "(()))" 或结束括号为 "())))" 。
//
//
// 返回 为使结果字符串 s 有效而必须添加的最少括号数。
//
//
//
// 示例 1：
//输入：s = "())"
//输出：1
//
//
// 示例 2：
//输入：s = "((("
//输出：3
//
//
//
//
// 提示：
//
//
// 1 <= s.length <= 1000
// s 只包含 '(' 和 ')' 字符。
//
//
// Related Topics 栈 贪心 字符串 👍 149 👎 0
/**
 * @author mayanwei
 * @date 2022-08-09.
 */
public class _921_使括号有效的最少添加{
    class Solution {
        //核心思路是以左括号为基准，通过维护对右括号的需求数 need，来计算最小的插入次数
        public int minAddToMakeValid(String s) {
            // res 记录插入次数
            int res = 0;
            // need 变量记录右括号的需求量
            int need = 0;
            for (int i = 0; i < s.length(); i++) {
                char ch = s.charAt(i);
                if (ch == '(') {
                    // 对右括号的需求加1
                    need++;
                }
                if (ch == ')') {
                    // 对右括号的需求-1
                    need --;
                }
                if (need == -1) {
                    need = 0;
                    // 需插入一个左括号
                    res++;
                }
            }
            return res + need;
        }
    }
}
