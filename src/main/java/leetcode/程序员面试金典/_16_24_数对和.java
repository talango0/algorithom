package leetcode.程序员面试金典;
//设计一个算法，找出数组中两数之和为指定值的所有整数对。一个数只能属于一个数对。
//
//示例 1:
//
//输入: nums = [5,6,5], target = 11
//输出: [[5,6]]
//示例 2:
//
//输入: nums = [5,6,5,6], target = 11
//输出: [[5,6],[5,6]]
//提示：
//
//nums.length <= 100000
//-10^5 <= nums[i], target <= 10^5
//
//来源：力扣（LeetCode）
//链接：https://leetcode.cn/problems/pairs-with-sum-lcci
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

import org.junit.Assert;
import org.junit.jupiter.api.Test;

import java.util.*;

/**
 * @author mayanwei
 * @date 2023-06-16.
 */
public class _16_24_数对和{
    class Solution{
        public List<List<Integer>> pairSums(int[] nums, int target) {
            if (nums == null || nums.length == 0) {
                return new ArrayList<>(0);
            }
            HashMap<Integer, Integer> desireMap = new HashMap<>();
            List<List<Integer>> res = new ArrayList<>();
            for (int cur : nums) {
                if (desireMap.containsKey(cur)) {
                    Integer existCount = desireMap.get(cur);
                    if (existCount > 0) {
                        existCount--;
                        res.add(Arrays.asList(cur, target - cur));
                        int num1 = cur < target - cur ? cur :target - cur;
                        res.add(Arrays.asList(num1, target - num1));
                    }
                    if (existCount == 0) {
                        desireMap.remove(cur);
                    }
                    continue;
                }
                int desireNum = target - cur;
                desireMap.put(desireNum, desireMap.getOrDefault(desireNum, 0) + 1);
            }
            return res;
        }
    }

    class Solution2{
        public List<List<Integer>> pairSums(int[] nums, int target) {
            Arrays.sort(nums);
            List<List<Integer>> ans = new ArrayList<>();
            int i = 0, j = nums.length - 1;
            while (i < j) {
                int sum = nums[i] + nums[j];
                if (sum == target) {
                    ans.add(Arrays.asList(nums[i], nums[j]));
                    i++;
                    j--;
                }
                else if (sum > target) {
                    j--;
                }
                else {
                    i++;
                }
            }
            return ans;
        }
    }

    @Test
    public void test() {
        Solution solution = new Solution();
        //int [] nums = new int []{5,6,5,6};
        int[] nums = new int[]{976, 455, -356, -384, 876, 196, 444, -636, -252, 532, 436, -731, -9, 147, 393, 627, 401, 413, -289, 110, -479, 870, 471, 381, 303, 553, 623, -155, 809, -637, -569, 845, 993, -648, 511, 624, -194, 62, 160, 543, -165, 231, -729, 392, 905, 158, 154, -45, -547, 830, 885, 484, 44, 919, 114, -575, 539, 454, 933, -389, 248, 664, -590, 561, 403, 913, -105, -433, 362, -137, -128, 847, -389, 767, 980, -739, -100, 487, 421, 956, 20, 618, 907, -289, -495, 351, 161, 996, -671, 888, 516, 263, 138, -61, 729, -102, -305, 952, -416, 241, 591, -52, -639, 884, 284, -739, 584, -89, 672, 180, 836, 953, 983, 240, 556, 148, 173, 166, 277, 413, 409, -580, 22, 745, 323, -376, 282, -328, -161, -547, 90, 8, 56, 612, 873, 538, -27, 150, 545, 912, -659, 132, 23, 761, -321, 707, 825, 81, 888, 363, -697, -704, 439, 800, 430, -378, 189, 142, -706, 370, 529, 697, -403, 216, 164, 246, 750, 67, 283, 614, 398, 769, 127, 794, 979, -104, 538, 904, 360, 358, 588, 76, 148, -631, 502, 219, 807, 896, 832, 672, 608, 47, 608, 301, 701, -689, -620, 693, -119, -268, -263, -439, -356, -70, 120, -239, 71, 601, 892, 606, -488, 581, 220, 282, 393, -535, 595, -313, -437, -415, -141, -153, 642, -188, 493, -507, -579, -344, -237, 130, 120, -550, 676, -178, 244, 163, -238, -207, -656, 933, 90, -518, 752, 373, 953, 23, 96, -21, -215, -589, -714, -238, 900, 134, -3, 155, 317, 313, 119, -271, -437, 612, 50, 79, -463, 99, 300, 372, 835, 478, 369, 128, 740, -54, 93, 602, 985, 180, 642, 744, -473, -240, -720, 923, -282, 247, -180, 836, -652, 468, 805, 308, 291, -727, 640, -734, 197, 326, 82, -364, 308, -545, 742, -575, -117, 576, 117, -283, 411, -46, -709, -494, 322, 942, 307, 408, -644, 282, 77, 333, 605, 845, -332, -568, -309, -352, -26, -61, -28, -317, -704, 806, -113, 515, 850, 244, 801, 30, 671, 64, -470, -690, -644, 40, 910, 849, -451, 28, 627, -608, 10, 935, 666, 500, 357, 942, 228, -104, 316, -465, 837, -509, -320, -413, 454, 962, 326, 868, -37, 145, -727, 214, -605, 8, 852, 927, 424, -513, 619, 71, 565, 200, 417, -724, -125, -482, 263, 705, 215, -407, -740, -38, 620, 645, -417, 528, 962, 443, -685, 765, 113, 784, -147, 956, 434, 283, 436, 62, -229, -544, -70, 978, -18, 139, -368, 803, -581, 640, 267, -15, 689, -174, -106, 350, -511, 995, 73, 56, -623, 420, -679, -486, 91, 125, -377, 327, -588, -51, -414, 633, 666, 763, 516, 810, -677, 192, 941, 126, 126, -55, 139, -706, 778, 194, 861, 115, 849, 251, 244, -305, -112, 960, 760, 663, 167, 15, 900, -179, 16, -555, 693, 844, -128, 194, 767, 777, 589, -551, 66, -152, 416, -341, 22, 384, 3, 428, -13, -209, -137, 73, 732, 212, -706, 317, 128, -630, 671, 346, 502, 599, -333, 784, 881, 111, 97, 912, 390, -271, 721, 152, 265, 41, -630, 789, 726, -654, 92, 872, -549, 831, 26, 752, 242, 310, 607, 499, 537, 464, 589, -26, 377, 473, 123, 34, 103, 147, 494, -363, 377, 508, 522, 184, 46, 130, -244, 294, 718, 793, -662, 648, -158, 541, 911, 414, 108, 729, 43, 14, 667, 669, 287, 484, -514, -549, 491, 454, 85, 465, 983, 130, 360, -686, 72, 936, -164, -554, 9, 181, -614, 485, 775, 811, 167, -593, 701, 307, 496, -95, 995, 282, 37, -440, -722, 175, 918, 100, 137, -193, 970, 89, 704, 245, 922, 197, 6, 524, 719, -228, -209, -519, -379, 117, 506, 777, 269, 271, 282, 597, -486, -343, -67, 445, 449, 326, 596, 635, 491, 803, -593, 943, -700, 149, 126, -493, 727, 451, -84, 896, -58, 960, 227, 200, 12, 259, 634, 945, 176, -47, 693, 893, 213, 56, 343, -686, 626, 873, 361, 773, 626, 190, 212, 561, 802, 879, 128, 987, 543, -157, 577, 545, 895, 381, -625, 14, 812, 369, 612, 16, 867, 284, 907, 293, 402, 302, -125, -392, 575, 452, 527, -386, 762, 108, -574, -157, 91, 946, 9, 159, 360, 887, -260, 774, 666, 25, 240, -616, 206, 236, 810, 452, 395, -404, 253, 227, 268, 298, 793, 238, -522, -594, 726, 806, 183, -208, 93, -386, 208, 758, 176, 895, 233, -250, 16, 645, 450, 5, 84, -259, 541, -60, 646, -445, 465, 153, 960, 133, 707, -441, 257, -707, -121, 131, 76, 659, -416, -172, 122, -624, -212, -176, -549, -546, 902, 384, -576, 39, 271, 18, 885, 846, 102, -639, 735, 908, -415, 174, 62, -697, 519, 829, 356, 163, -134, 124, 209, 465, -407, -737, 36, -538, 573, 142, 29, 805, -24, -241, 141, 632, -584, 226, -663, 240, 438, 646, 185, 210, -556, 92, 137, 569, -631, 287, 204, -537, -426, 752, -508, -640, 886, 764, 813, -58, 375, -496, 743, 742, -476, 128, -553, -632, 751, 497, -282, 340, -44, 316, 661, 172, 345, 492, 80, -300, 980, 368, 119, 840, 217, 143, -77, 965, 345, 350, 242, 963, 136, 824, 696, 554, 494, 621, -451, 807, -521, 390, 682, 250, -528, 892, 234, -187, 52, 148, -651, 600, -157, 98, 788, 22, 109, -573, 291, -90, -656, -411, -226, 962, 886, 118, 78, -473, 154, 109, -405, 200, 500, 695, 770, 887, 251, 729, -448, 89, -350, -228, 314, 36, 627, 222, 403, 663, -11, -723, -3, 435, 179, 953, 864, 805, 629, -700, -657, -70, 738, 915, -340, 163, 413, 495, -222, 29, 226, 952, -589, 527, 107, 104, 791, -462, 75, -272, 146, 397, -517, -57, 80, 432, -147, -390, 248, 749, 284, 183, 259, 215, 302, 12, 12, 83, -94, -371, 83, -687, 280, 274, 670, 43, 463, 60, 742, -71, 247, -104, 744, 913, 101, -35, 673, 412, 990, 660, -537, -236, 704, 566, 880, 904, 95, 482, -680, 128, 300, -52, 106, 829, 92, 311, 314, 831, -7, 109};
        int target = 256;

        List<List<Integer>> lists = solution.pairSums(nums, target);
        lists.sort(Comparator.comparingInt(o -> o.get(0)));
        System.out.println(lists.size());
        //System.out.println(Arrays.toString(lists.toArray()));
        for (List<Integer> list : lists) {
            Integer sum = list.get(1) + list.get(0);
            //if (!sum.equals(256)) {
            System.out.println(Arrays.toString(list.toArray()));
            //}
        }

        Solution solution1 = new Solution();
        //int [] nums = new int []{5,6,5,6};
        int[] nums1 = new int[]{976, 455, -356, -384, 876, 196, 444, -636, -252, 532, 436, -731, -9, 147, 393, 627, 401, 413, -289, 110, -479, 870, 471, 381, 303, 553, 623, -155, 809, -637, -569, 845, 993, -648, 511, 624, -194, 62, 160, 543, -165, 231, -729, 392, 905, 158, 154, -45, -547, 830, 885, 484, 44, 919, 114, -575, 539, 454, 933, -389, 248, 664, -590, 561, 403, 913, -105, -433, 362, -137, -128, 847, -389, 767, 980, -739, -100, 487, 421, 956, 20, 618, 907, -289, -495, 351, 161, 996, -671, 888, 516, 263, 138, -61, 729, -102, -305, 952, -416, 241, 591, -52, -639, 884, 284, -739, 584, -89, 672, 180, 836, 953, 983, 240, 556, 148, 173, 166, 277, 413, 409, -580, 22, 745, 323, -376, 282, -328, -161, -547, 90, 8, 56, 612, 873, 538, -27, 150, 545, 912, -659, 132, 23, 761, -321, 707, 825, 81, 888, 363, -697, -704, 439, 800, 430, -378, 189, 142, -706, 370, 529, 697, -403, 216, 164, 246, 750, 67, 283, 614, 398, 769, 127, 794, 979, -104, 538, 904, 360, 358, 588, 76, 148, -631, 502, 219, 807, 896, 832, 672, 608, 47, 608, 301, 701, -689, -620, 693, -119, -268, -263, -439, -356, -70, 120, -239, 71, 601, 892, 606, -488, 581, 220, 282, 393, -535, 595, -313, -437, -415, -141, -153, 642, -188, 493, -507, -579, -344, -237, 130, 120, -550, 676, -178, 244, 163, -238, -207, -656, 933, 90, -518, 752, 373, 953, 23, 96, -21, -215, -589, -714, -238, 900, 134, -3, 155, 317, 313, 119, -271, -437, 612, 50, 79, -463, 99, 300, 372, 835, 478, 369, 128, 740, -54, 93, 602, 985, 180, 642, 744, -473, -240, -720, 923, -282, 247, -180, 836, -652, 468, 805, 308, 291, -727, 640, -734, 197, 326, 82, -364, 308, -545, 742, -575, -117, 576, 117, -283, 411, -46, -709, -494, 322, 942, 307, 408, -644, 282, 77, 333, 605, 845, -332, -568, -309, -352, -26, -61, -28, -317, -704, 806, -113, 515, 850, 244, 801, 30, 671, 64, -470, -690, -644, 40, 910, 849, -451, 28, 627, -608, 10, 935, 666, 500, 357, 942, 228, -104, 316, -465, 837, -509, -320, -413, 454, 962, 326, 868, -37, 145, -727, 214, -605, 8, 852, 927, 424, -513, 619, 71, 565, 200, 417, -724, -125, -482, 263, 705, 215, -407, -740, -38, 620, 645, -417, 528, 962, 443, -685, 765, 113, 784, -147, 956, 434, 283, 436, 62, -229, -544, -70, 978, -18, 139, -368, 803, -581, 640, 267, -15, 689, -174, -106, 350, -511, 995, 73, 56, -623, 420, -679, -486, 91, 125, -377, 327, -588, -51, -414, 633, 666, 763, 516, 810, -677, 192, 941, 126, 126, -55, 139, -706, 778, 194, 861, 115, 849, 251, 244, -305, -112, 960, 760, 663, 167, 15, 900, -179, 16, -555, 693, 844, -128, 194, 767, 777, 589, -551, 66, -152, 416, -341, 22, 384, 3, 428, -13, -209, -137, 73, 732, 212, -706, 317, 128, -630, 671, 346, 502, 599, -333, 784, 881, 111, 97, 912, 390, -271, 721, 152, 265, 41, -630, 789, 726, -654, 92, 872, -549, 831, 26, 752, 242, 310, 607, 499, 537, 464, 589, -26, 377, 473, 123, 34, 103, 147, 494, -363, 377, 508, 522, 184, 46, 130, -244, 294, 718, 793, -662, 648, -158, 541, 911, 414, 108, 729, 43, 14, 667, 669, 287, 484, -514, -549, 491, 454, 85, 465, 983, 130, 360, -686, 72, 936, -164, -554, 9, 181, -614, 485, 775, 811, 167, -593, 701, 307, 496, -95, 995, 282, 37, -440, -722, 175, 918, 100, 137, -193, 970, 89, 704, 245, 922, 197, 6, 524, 719, -228, -209, -519, -379, 117, 506, 777, 269, 271, 282, 597, -486, -343, -67, 445, 449, 326, 596, 635, 491, 803, -593, 943, -700, 149, 126, -493, 727, 451, -84, 896, -58, 960, 227, 200, 12, 259, 634, 945, 176, -47, 693, 893, 213, 56, 343, -686, 626, 873, 361, 773, 626, 190, 212, 561, 802, 879, 128, 987, 543, -157, 577, 545, 895, 381, -625, 14, 812, 369, 612, 16, 867, 284, 907, 293, 402, 302, -125, -392, 575, 452, 527, -386, 762, 108, -574, -157, 91, 946, 9, 159, 360, 887, -260, 774, 666, 25, 240, -616, 206, 236, 810, 452, 395, -404, 253, 227, 268, 298, 793, 238, -522, -594, 726, 806, 183, -208, 93, -386, 208, 758, 176, 895, 233, -250, 16, 645, 450, 5, 84, -259, 541, -60, 646, -445, 465, 153, 960, 133, 707, -441, 257, -707, -121, 131, 76, 659, -416, -172, 122, -624, -212, -176, -549, -546, 902, 384, -576, 39, 271, 18, 885, 846, 102, -639, 735, 908, -415, 174, 62, -697, 519, 829, 356, 163, -134, 124, 209, 465, -407, -737, 36, -538, 573, 142, 29, 805, -24, -241, 141, 632, -584, 226, -663, 240, 438, 646, 185, 210, -556, 92, 137, 569, -631, 287, 204, -537, -426, 752, -508, -640, 886, 764, 813, -58, 375, -496, 743, 742, -476, 128, -553, -632, 751, 497, -282, 340, -44, 316, 661, 172, 345, 492, 80, -300, 980, 368, 119, 840, 217, 143, -77, 965, 345, 350, 242, 963, 136, 824, 696, 554, 494, 621, -451, 807, -521, 390, 682, 250, -528, 892, 234, -187, 52, 148, -651, 600, -157, 98, 788, 22, 109, -573, 291, -90, -656, -411, -226, 962, 886, 118, 78, -473, 154, 109, -405, 200, 500, 695, 770, 887, 251, 729, -448, 89, -350, -228, 314, 36, 627, 222, 403, 663, -11, -723, -3, 435, 179, 953, 864, 805, 629, -700, -657, -70, 738, 915, -340, 163, 413, 495, -222, 29, 226, 952, -589, 527, 107, 104, 791, -462, 75, -272, 146, 397, -517, -57, 80, 432, -147, -390, 248, 749, 284, 183, 259, 215, 302, 12, 12, 83, -94, -371, 83, -687, 280, 274, 670, 43, 463, 60, 742, -71, 247, -104, 744, 913, 101, -35, 673, 412, 990, 660, -537, -236, 704, 566, 880, 904, 95, 482, -680, 128, 300, -52, 106, 829, 92, 311, 314, 831, -7, 109};

        List<List<Integer>> lists1 = solution1.pairSums(nums1, target);
        System.out.println(lists1.size());
        //System.out.println(Arrays.toString(lists.toArray()));
        lists1.sort(Comparator.comparingInt(o -> o.get(0)));
        for (List<Integer> list : lists1) {
            Integer sum = list.get(1) + list.get(0);
            //if (!sum.equals(256)) {
            System.out.println(Arrays.toString(list.toArray()));
            //}
        }
        Assert.assertEquals(lists1, lists);

    }
}
