package leetcode.arrays;
//假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。
// 每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。
//
// 请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，
// 其中 queue[j] = [hj, kj] 是队列中第j 个人的属性（queue[0] 是排在队列前面的人）。
//
//
// 示例 1：
//输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
//输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
//解释：
//编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
//编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
//编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
//编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
//编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
//编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
//因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。
//
//
// 示例 2：
//输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
//输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
//
// 提示：
//
//
// 1 <= people.length <= 2000
// 0 <= hi <= 10⁶
// 0 <= ki < people.length
// 题目数据确保队列可以被重建
//
//
// Related Topics 贪心 树状数组 线段树 数组 排序 👍 1409 👎 0

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

/**
 * @author mayanwei
 * @date 2022-09-28.
 */
public class _406_根据身高重建队列{
    class Solution{
        /**
         * <pre>
         * 将每个人按照身高从大到小进行排序，处理身高相同的人的方法：按照 h_i 为第一个关键字降序， k_i为第二关键字升序进行排序。
         * 如果我们按照排完序后的顺序，依次将每个人放入队列中，那么我们放入第 i 个人时
         * 1. 第 0,..., i-1个人已经在队列中安排了位置，他们只要站在第 i 个人的前面，就会对 i 个人产生影响，因为他们都比第 i个人高。
         * 2. 而第 i + 1, ..., n-1 个人还没有放入队列中，并且他们无论站在哪里，对第 i 个人都没有任何影响，因为他们都比第 i 个人矮。
         * 因此，我们无从得知应该给后见的人安排多少个【空】位置。后面的人既然不会对第 i 个人造成影响，可以采用【插空】方法，依次
         * 给每一个人在当前的队列中选择一个插入位置。也就是说，当我们放入第 i 个人时，只需要将其插入队列中，使得他的前面恰好有 k_i 个人即可。
         *
         * ┌─────────────────────────────────────┐
         * │[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]│
         * │                                     │
         * │ [7,0],[7,1],[6,1],[5,0],[5,2],[4,4] │
         * │                                     │
         * │                                     │
         * │[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]│
         * └─────────────────────────────────────┘
         *
         * 时间复杂度：O(n^2)
         * 空间复杂度：O(logn)
         * </pre>
         */
        public int[][] reconstructQueue(int[][] people) {
            Arrays.sort(people, new Comparator<int[]>(){
                public int compare(int[] p1, int[] p2) {
                    if (p1[0] != p2[0]) {
                        return p2[0] - p1[0];
                    }
                    else {
                        return p1[1] - p2[1];
                    }
                }
            });
            List<int[]> ans = new ArrayList<>();
            for (int[] person : people) {
                ans.add(person[1], person);
            }
            return ans.toArray(new int[ans.size()][]);
        }
    }
}
