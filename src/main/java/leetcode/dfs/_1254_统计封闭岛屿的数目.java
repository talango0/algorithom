package leetcode.dfs;
//二维矩阵 grid 由 0 （土地）和 1 （水）组成。岛是由最大的4个方向连通的 0 组成的群，封闭岛是一个 完全 由1包围（左、上、右、下）的岛。
//
// 请返回 封闭岛屿 的数目。
//
// 示例 1：
//
//输入：grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,
//0,1],[1,1,1,1,1,1,1,0]]
//输出：2
//解释：
//灰色区域的岛屿是封闭岛屿，因为这座岛屿完全被水域包围（即被 1 区域包围）。
//
// 示例 2：
//
//
//
//
//输入：grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
//输出：1
//
//
// 示例 3：
//
//
//输入：grid = [[1,1,1,1,1,1,1],
//             [1,0,0,0,0,0,1],
//             [1,0,1,1,1,0,1],
//             [1,0,1,0,1,0,1],
//             [1,0,1,1,1,0,1],
//             [1,0,0,0,0,0,1],
//             [1,1,1,1,1,1,1]]
//输出：2
//
//
//
//
// 提示：
//
//
// 1 <= grid.length, grid[0].length <= 100
// 0 <= grid[i][j] <=1
//
//
// Related Topics 深度优先搜索 广度优先搜索 并查集 数组 矩阵 👍 153 👎 0
/**
 * @author mayanwei
 * @date 2022-08-05.
 */
public class _1254_统计封闭岛屿的数目{
    class Solution {
        // 该题与200题的区别
        // 1. 应 0 表示陆地，用1表示海水
        // 2. 计算封闭岛屿 的数目，就是上下左右全部被1 包围，也就是说靠边的陆地不算做 封闭岛屿
        // 思路：把200 题中靠边的岛屿排除掉就是最终岛屿
        public int closedIsland(int[][] grid) {
            int m = grid.length, n = grid[0].length;
            for (int j = 0; j < n; j++) {
                // 把靠上边的岛屿淹了
                dfs(grid, 0, j);
                // 把靠下边的岛屿淹了
                dfs(grid, m-1, j);
            }
            for (int i = 0; i < m; i++) {
                // 把靠左边的岛屿淹了
                dfs(grid, i, 0);
                // 把靠右边的岛屿淹了
                dfs(grid, i, n-1);
            }

            // 遍历 grid,剩下的岛屿都是封闭的岛屿
            int res = 0;
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (grid[i][j] == 0) {
                        res ++;
                        dfs(grid, i, j);
                    }
                }
            }
            return res;
        }
        void dfs(int[][] grid, int i, int j) {
            int m = grid.length, n = grid[0].length;
            if (i<0 || j<0 || i >= m || j >= n) {
                return;
            }
            if (grid[i][j] == 1) {
                // 已经是海水了
                return;
            }
            // 将(i, j) 变成海水
            grid[i][j] = 1;
            // 淹没上下左右的陆地
            dfs(grid, i-1, j);
            dfs(grid, i+1, j);
            dfs(grid, i, j-1);
            dfs(grid, i, j+1);
        }
    }
}
